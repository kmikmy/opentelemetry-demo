# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

# extra settings to be merged into OpenTelemetry Collector configuration
# do not delete this file

## Example configuration for sending data to your own OTLP HTTP backend
## Note: the spanmetrics exporter must be included in the exporters array
## if overriding the traces pipeline.
##
#  exporters:
#    otlphttp/example:
#      endpoint: <your-endpoint-url>
#
#  service:
#    pipelines:
#      traces:
#        exporters: [spanmetrics, otlphttp/example]

exporters:
  zipkin:
    endpoint: "http://zipkin:9411/api/v2/spans"
  otlp/tempo:
    endpoint: "http://tempo:4317"
    tls:
      insecure: true
  otlphttp/mackerel:
    endpoint: "https://otlp-vaxila.mackerelio.com"
    headers:
      Accept: "*/*"
      "Mackerel-Api-Key": ${env:MACKEREL_APIKEY}
  datadog:
    api:
      site: "ap1.datadoghq.com"
      key: "${env:DATADOG_APIKEY}"

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [memory_limiter, transform, batch]
      # Exporting to mackerel
      # exporters: [otlp, debug, spanmetrics, zipkin, otlp/tempo, otlphttp/mackerel]
      #
      # Exporting Datadog
      # exporters: [otlp, debug, spanmetrics, zipkin, otlp/tempo, datadog]
      #
      # Exporting only OSS
      exporters: [otlp, debug, spanmetrics, zipkin, otlp/tempo]
    metrics:
      receivers: [hostmetrics, docker_stats, httpcheck/frontend-proxy, otlp, redis, spanmetrics]
      processors: [memory_limiter, batch]
      exporters: [otlphttp/prometheus, debug]
    logs:
      receivers: [otlp]
      processors: [memory_limiter, batch]
      exporters: [opensearch, debug]
